{"version":3,"file":"static/js/937.4feef679.chunk.js","mappings":"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","sources":["app/components/NewPost/PostUser.tsx","app/components/NewPost/TextInput.tsx","app/components/NewPost/EmojiPicker.tsx","app/components/NewPost/ImagesViewer.tsx","app/components/NewPost/ImagesPicker.tsx","app/components/NewPost/FeelingPicker.tsx","app/components/NewPost/reducer.ts","app/components/NewPost/NewPostInput.tsx","app/components/NewPost/useSubmit.ts"],"sourcesContent":["import { memo } from \"react\";\r\nimport { Avatar, Box, Typography } from \"@mui/material\";\r\nimport { auth } from \"shared/firebase\";\r\n\r\ninterface IPostUser {\r\n\tfeeling: string | null;\r\n}\r\n\r\nconst PostUser = memo(({ feeling }: IPostUser) => {\r\n\tconst { currentUser: user } = auth;\r\n\treturn (\r\n\t\t<Box mb={1} display=\"flex\" alignItems=\"center\">\r\n\t\t\t<Avatar src={user?.photoURL as string | undefined} sx={{ mr: 1 }} />\r\n\t\t\t<Typography variant=\"subtitle2\">{user?.displayName}</Typography>\r\n\t\t\t{feeling && (\r\n\t\t\t\t<Typography variant=\"subtitle2\">\r\n\t\t\t\t\t&nbsp;{`is feeling ${feeling}`}\r\n\t\t\t\t</Typography>\r\n\t\t\t)}\r\n\t\t</Box>\r\n\t);\r\n});\r\n\r\nexport default PostUser;\r\n","import { memo } from \"react\";\r\nimport { TextField } from \"@mui/material\";\r\nimport { DispatchFunction } from \"./reducer\";\r\n\r\ninterface ITextInputProps {\r\n\ttext: string;\r\n\tdispatch: DispatchFunction;\r\n}\r\nconst TextInput = memo(({ text, dispatch }: ITextInputProps) => {\r\n\tconst handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n\t\tdispatch({ type: \"text\", payload: e.target.value });\r\n\r\n\treturn (\r\n\t\t<TextField\r\n\t\t\tplaceholder=\"What's on your mind?\"\r\n\t\t\tvariant=\"standard\"\r\n\t\t\tfullWidth\r\n\t\t\tmultiline\r\n\t\t\trows={5}\r\n\t\t\tvalue={text}\r\n\t\t\tonChange={handleChange}\r\n\t\t/>\r\n\t);\r\n});\r\n\r\nexport default TextInput;\r\n","import { useCallback } from \"react\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { EmojiEmotionsOutlined } from \"@mui/icons-material\";\r\nimport Picker, { EmojiClickData, Theme, Categories } from \"emoji-picker-react\";\r\nimport { ActosMenu } from \"components\";\r\nimport { DispatchFunction } from \"./reducer\";\r\n\r\nexport default function EmojiPicker({\r\n\tdispatch,\r\n}: {\r\n\tdispatch: DispatchFunction;\r\n}) {\r\n\tconst { palette } = useTheme();\r\n\r\n\tconst handleSelect = useCallback(\r\n\t\t(e: EmojiClickData) => dispatch({ type: \"emoji\", payload: e.emoji }),\r\n\t\t[]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<ActosMenu\r\n\t\t\ttooltipProps={{ title: \"Emoji\" }}\r\n\t\t\ticon={<EmojiEmotionsOutlined />}\r\n\t\t\tmuiMenuProps={{\r\n\t\t\t\tanchorOrigin: { horizontal: \"left\", vertical: \"bottom\" },\r\n\t\t\t\ttransformOrigin: { horizontal: \"right\", vertical: \"top\" },\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Picker\r\n\t\t\t\ttheme={palette.mode === \"light\" ? Theme.LIGHT : Theme.DARK}\r\n\t\t\t\tlazyLoadEmojis={true}\r\n\t\t\t\tonEmojiClick={handleSelect}\r\n\t\t\t\tsearchDisabled\r\n\t\t\t\tskinTonesDisabled\r\n\t\t\t\tcategories={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcategory: Categories.SMILEYS_PEOPLE,\r\n\t\t\t\t\t\tname: \"Faces & People\",\r\n\t\t\t\t\t},\r\n\t\t\t\t]}\r\n\t\t\t/>\r\n\t\t</ActosMenu>\r\n\t);\r\n}\r\n","import { memo } from \"react\";\r\nimport {\r\n\tImageList,\r\n\tImageListItem,\r\n\tIconButton,\r\n\tBox,\r\n\tuseTheme,\r\n} from \"@mui/material\";\r\nimport { Delete } from \"@mui/icons-material\";\r\nimport { DispatchFunction } from \"./reducer\";\r\nimport { PostImages } from \"./types\";\r\n\r\ninterface IImagesViewerProps {\r\n\timages: PostImages;\r\n\tdispatch: DispatchFunction;\r\n}\r\n\r\nconst ImagesViewer = memo(({ images, dispatch }: IImagesViewerProps) => {\r\n\tconst { palette } = useTheme();\r\n\r\n\tconst handleDelete = () => dispatch({ type: \"deleteImages\" });\r\n\r\n\tif (images.length < 1) return null;\r\n\treturn (\r\n\t\t<Box border={`1px solid ${palette.divider}`} className=\"imageViewer\">\r\n\t\t\t<IconButton\r\n\t\t\t\tonClick={handleDelete}\r\n\t\t\t\tsize=\"small\"\r\n\t\t\t\tclassName=\"deleteButton\"\r\n\t\t\t\tsx={{\r\n\t\t\t\t\tbackgroundColor:\r\n\t\t\t\t\t\tpalette.grey[palette.mode === \"light\" ? 300 : 800],\r\n\t\t\t\t\t\":hover\": {\r\n\t\t\t\t\t\tbackgroundColor:\r\n\t\t\t\t\t\t\tpalette.mode === \"light\" ? \"#d3d2d2\" : \"#494848\",\r\n\t\t\t\t\t},\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Delete fontSize=\"small\" />\r\n\t\t\t</IconButton>\r\n\t\t\t<ImageList cols={images.length < 2 ? 1 : 2}>\r\n\t\t\t\t{images.map((image, index) => (\r\n\t\t\t\t\t<ImageListItem key={index}>\r\n\t\t\t\t\t\t<img src={image.url} alt={image.file.name} />\r\n\t\t\t\t\t</ImageListItem>\r\n\t\t\t\t))}\r\n\t\t\t</ImageList>\r\n\t\t</Box>\r\n\t);\r\n});\r\n\r\nexport default ImagesViewer;\r\n","import { IconButton, Tooltip, Zoom } from \"@mui/material\";\r\nimport { PostImages } from \"./types\";\r\nimport { DispatchFunction } from \"./reducer\";\r\nimport { picture } from \"shared/assets/icons\";\r\n\r\nexport default function ImagesPicker({\r\n\tdispatch,\r\n}: {\r\n\tdispatch: DispatchFunction;\r\n}) {\r\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst { files } = e.target;\r\n\t\tconst images: PostImages = [];\r\n\t\tif (files) {\r\n\t\t\tArray.from(files).forEach((file) => {\r\n\t\t\t\tconst url = URL.createObjectURL(file);\r\n\t\t\t\timages.push({ url, file });\r\n\t\t\t});\r\n\t\t}\r\n\t\tdispatch({ type: \"addImages\", payload: images });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Tooltip title=\"Photo\" placement=\"top\" TransitionComponent={Zoom}>\r\n\t\t\t<IconButton component=\"label\" sx={{ color: \"initial\" }}>\r\n\t\t\t\t<img src={picture} alt=\"pickImage\" />\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\taccept=\"image/*\"\r\n\t\t\t\t\thidden\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tmultiple\r\n\t\t\t\t/>\r\n\t\t\t</IconButton>\r\n\t\t</Tooltip>\r\n\t);\r\n}\r\n","import { memo } from \"react\";\r\nimport { MenuItem, Box } from \"@mui/material\";\r\nimport { DispatchFunction } from \"./reducer\";\r\nimport { happy } from \"shared/assets/icons\";\r\nimport { ActosMenu } from \"components\";\r\n\r\nconst feelings = [\r\n\t\"😄 Happy\",\r\n\t\"🤩 Excited\",\r\n\t\"🥰 In Love\",\r\n\t\"😮 Surprised\",\r\n\t\"😡 Angry\",\r\n\t\"😣 Frustrated\",\r\n\t\"😔 Sad\",\r\n\t\"😫 Tired\",\r\n\t\"🤒 Sick\",\r\n\t\"😨 Scared\",\r\n\t\"😕 Confused\",\r\n\t\"😳 Embarrassed\",\r\n\t\"😟 Worried\",\r\n\t\"😅 Nervous\",\r\n\t\"😌 Relaxed\",\r\n\t\"🙏 Hopeful\",\r\n\t\"😊 Content\",\r\n\t\"😐 Bored\",\r\n\t\"😶 Neutral\",\r\n\t\"🥺 Hurt\",\r\n];\r\n\r\nconst FeelingPicker = memo(({ dispatch }: { dispatch: DispatchFunction }) => {\r\n\tconst handleSelect = (feeling: string, handleClose: () => void) => {\r\n\t\tdispatch({ type: \"feeling\", payload: feeling });\r\n\t\thandleClose();\r\n\t};\r\n\r\n\tconst handleFeelingDelete = (handleClose: () => void) => {\r\n\t\tdispatch({ type: \"feeling\", payload: null });\r\n\t\thandleClose();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ActosMenu\r\n\t\t\ttooltipProps={{ title: \"Feeling\" }}\r\n\t\t\ticon={<img src={happy} alt=\"feelings\" />}\r\n\t\t\tmuiMenuProps={{\r\n\t\t\t\tanchorOrigin: { horizontal: \"right\", vertical: \"top\" },\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{(handleClose) => (\r\n\t\t\t\t<Box>\r\n\t\t\t\t\t<MenuItem onClick={() => handleFeelingDelete(handleClose)}>\r\n\t\t\t\t\t\tNone\r\n\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t{feelings.map((feeling) => (\r\n\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\tkey={feeling}\r\n\t\t\t\t\t\t\tonClick={() => handleSelect(feeling, handleClose)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{feeling}\r\n\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Box>\r\n\t\t\t)}\r\n\t\t</ActosMenu>\r\n\t);\r\n});\r\n\r\nexport default FeelingPicker;\r\n","import { INewPost } from \"./types\";\r\n\r\ntype ActionTypes =\r\n\t| \"text\"\r\n\t| \"emoji\"\r\n\t| \"addImages\"\r\n\t| \"deleteImages\"\r\n\t| \"feeling\"\r\n\t| \"reset\";\r\n\r\ninterface Action {\r\n\ttype: ActionTypes;\r\n\tpayload?: any;\r\n}\r\n\r\nexport interface State extends INewPost {}\r\n\r\nexport type DispatchFunction = React.Dispatch<Action>;\r\n\r\nexport const reducer = (state: State, action: Action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"text\":\r\n\t\t\treturn { ...state, text: action.payload };\r\n\t\tcase \"emoji\":\r\n\t\t\treturn { ...state, text: state.text + action.payload };\r\n\t\tcase \"addImages\":\r\n\t\t\treturn { ...state, images: [...state.images, ...action.payload] };\r\n\t\tcase \"deleteImages\":\r\n\t\t\treturn { ...state, images: [] };\r\n\t\tcase \"feeling\":\r\n\t\t\treturn { ...state, feeling: action.payload };\r\n\t\tcase \"reset\":\r\n\t\t\treturn INITIAL_STATE;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport const INITIAL_STATE: State = {\r\n\ttext: \"\",\r\n\timages: [],\r\n\tfeeling: null,\r\n};\r\n","import { useReducer, forwardRef } from \"react\";\r\nimport { Close } from \"@mui/icons-material\";\r\nimport {\r\n\tBox,\r\n\tDivider,\r\n\tIconButton,\r\n\tPaper,\r\n\tTypography,\r\n\tuseTheme,\r\n} from \"@mui/material\";\r\nimport { Toast, SubmitButton } from \"components\";\r\nimport { motion } from \"framer-motion\";\r\nimport { auth } from \"shared/firebase\";\r\nimport PostUser from \"./PostUser\";\r\nimport TextInput from \"./TextInput\";\r\nimport EmojiPicker from \"./EmojiPicker\";\r\nimport ImagesViewer from \"./ImagesViewer\";\r\nimport ImagesPicker from \"./ImagesPicker\";\r\nimport FeelingPicker from \"./FeelingPicker\";\r\nimport { reducer, INITIAL_STATE } from \"./reducer\";\r\nimport useSubmit from \"./useSubmit\";\r\n\r\nconst NewPostInput = forwardRef(\r\n\t({ handleClose }: { handleClose: () => void }, ref) => {\r\n        const {currentUser: user} = auth;\r\n\t\tconst { palette } = useTheme();\r\n\t\tconst [state, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n\t\tconst { isLoading, toast, handleSubmit } = useSubmit(state);\r\n\t\tconst { text, images, feeling } = state;\r\n\r\n\t\tconst onSubmit = async () => {\r\n\t\t\tawait handleSubmit();\r\n\t\t\tdispatch({ type: \"reset\" });\r\n\t\t\tsetTimeout(() => handleClose(), 2000);\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<motion.div\r\n\t\t\t\tinitial={{ scale: 0.5 }}\r\n\t\t\t\tanimate={{ scale: 1 }}\r\n\t\t\t\tclassName=\"newPostInput\"\r\n\t\t\t>\r\n\t\t\t\t<Paper>\r\n\t\t\t\t\t<Box className=\"header\">\r\n\t\t\t\t\t\t<IconButton onClick={handleClose}>\r\n\t\t\t\t\t\t\t<Close />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<Typography>Create Post</Typography>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Divider />\r\n\t\t\t\t\t<Box className=\"body\">\r\n\t\t\t\t\t\t<PostUser feeling={feeling} />\r\n\t\t\t\t\t\t<TextInput text={text} dispatch={dispatch} />\r\n\t\t\t\t\t\t<EmojiPicker dispatch={dispatch} />\r\n\t\t\t\t\t\t<ImagesViewer images={images} dispatch={dispatch} />\r\n\r\n\t\t\t\t\t\t<Box\r\n\t\t\t\t\t\t\tborder={`1px solid ${palette.divider}`}\r\n\t\t\t\t\t\t\tclassName=\"addons\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Typography>Add to your post</Typography>\r\n\t\t\t\t\t\t\t<ImagesPicker dispatch={dispatch} />\r\n\t\t\t\t\t\t\t<FeelingPicker dispatch={dispatch} />\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t<SubmitButton\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\ttext=\"Post\"\r\n\t\t\t\t\t\t\tisSubmitting={isLoading}\r\n\t\t\t\t\t\t\tdisabled={!text && images.length < 1 && !feeling}\r\n\t\t\t\t\t\t\tonClick={onSubmit}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Paper>\r\n\t\t\t\t<Toast\r\n\t\t\t\t\ttoast={toast}\r\n\t\t\t\t\tanchorOrigin={{ horizontal: \"center\", vertical: \"bottom\" }}\r\n\t\t\t\t/>\r\n\t\t\t</motion.div>\r\n\t\t);\r\n\t}\r\n);\r\n\r\nexport default NewPostInput;\r\n","import { useState } from \"react\";\r\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\nimport { storage, db, auth } from \"shared/firebase\";\r\nimport { INewPost } from \"./types\";\r\nimport { collection, addDoc } from \"firebase/firestore\";\r\nimport { handleFirebaseError } from \"shared/helpers/utils\";\r\nimport { useToast } from \"components\";\r\n\r\nexport default function useSubmit(state: INewPost) {\r\n\tconst { currentUser: user } = auth;\r\n\tconst { toast, toastify } = useToast();\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst uploadImage = async (file: File | null, userId: string) => {\r\n\t\tif (!file) return;\r\n\t\tconst imageRef = ref(storage, `postImages/${userId}-${file.name}`);\r\n\t\treturn uploadBytes(imageRef, file);\r\n\t};\r\n\r\n\tconst handleSubmit = async () => {\r\n\t\tif (!user) return;\r\n\t\tconst { text, images, feeling } = state;\r\n\r\n\t\ttry {\r\n\t\t\tsetIsLoading(true);\r\n\t\t\tconst snapshots = await Promise.all(\r\n\t\t\t\timages.map((image) => uploadImage(image.file, user.uid))\r\n\t\t\t);\r\n\t\t\tconst imageUrls = await Promise.all(\r\n\t\t\t\tsnapshots.map(\r\n\t\t\t\t\t(snapshot) => snapshot && getDownloadURL(snapshot.ref)\r\n\t\t\t\t)\r\n\t\t\t);\r\n\r\n\t\t\tawait addDoc(collection(db, \"posts\"), {\r\n\t\t\t\townerId: user.uid,\r\n\t\t\t\tcontent: text.replace(/\\n/g, \"<br>\"),\r\n\t\t\t\tfeeling,\r\n\t\t\t\timages: imageUrls,\r\n\t\t\t\tpostedAt: new Date().toLocaleString(),\r\n\t\t\t\tlikes: [],\r\n\t\t\t\ttotalComments: 0,\r\n\t\t\t});\r\n\t\t\ttoastify(\"Post is submitted successfully\", \"success\");\r\n\t\t\tsetIsLoading(false);\r\n\t\t} catch (error) {\r\n\t\t\thandleFirebaseError(error, toastify);\r\n\t\t\tsetIsLoading(false);\r\n\t\t}\r\n\t};\r\n\r\n\treturn { handleSubmit, toast, isLoading };\r\n}\r\n"],"names":["memo","feeling","user","auth","Box","mb","display","alignItems","Avatar","src","photoURL","sx","mr","Typography","variant","displayName","text","dispatch","TextField","placeholder","fullWidth","multiline","rows","value","onChange","e","type","payload","target","EmojiPicker","palette","useTheme","handleSelect","useCallback","emoji","tooltipProps","title","icon","EmojiEmotionsOutlined","muiMenuProps","anchorOrigin","horizontal","vertical","transformOrigin","theme","mode","Theme","lazyLoadEmojis","onEmojiClick","searchDisabled","skinTonesDisabled","categories","category","Categories","name","images","length","border","divider","className","IconButton","onClick","size","backgroundColor","grey","Delete","fontSize","ImageList","cols","map","image","index","ImageListItem","url","alt","file","ImagesPicker","Tooltip","placement","TransitionComponent","Zoom","component","color","picture","accept","hidden","files","Array","from","forEach","URL","createObjectURL","push","multiple","feelings","happy","handleClose","MenuItem","handleFeelingDelete","reducer","state","action","INITIAL_STATE","NewPostInput","forwardRef","ref","useReducer","useToast","toast","toastify","useState","isLoading","setIsLoading","uploadImage","userId","imageRef","storage","uploadBytes","handleSubmit","Promise","all","uid","snapshots","snapshot","getDownloadURL","imageUrls","addDoc","collection","db","ownerId","content","replace","postedAt","Date","toLocaleString","likes","totalComments","handleFirebaseError","useSubmit","onSubmit","setTimeout","motion","initial","scale","animate","Paper","Close","Divider","isSubmitting","disabled"],"sourceRoot":""}